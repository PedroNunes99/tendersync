---------------------------- section ----------------------------
docs
---------------------------- document_id ----------------------------
648
---------------------------- title ----------------------------
Transaction Tracing (Silver and Gold Only)
---------------------------- permalink ----------------------------
transaction-tracing-silver-and-gold-only
---------------------------- keywords ----------------------------
transaction
---------------------------- body ----------------------------
<a name="Overview"></a>
## Overview

Transaction Tracing is a very powerful feature that extends the RPM service in a very important way. Primarily, RPM only collects streaming metric data. This data is aggregated, so that if the ORM Layer (e.g. ActiveRecord, Hibernate, ...) was invoked 100 times during a 60 second time period, RPM would collector one metric that was an aggregate of the 100 invocations. With Transaction Tracer, just the opposite is true. It captures the exact invocation pattern and details related to an invocation, such as the exact SQL statement that was issued.  It automatically detects and reports on your slowest individual http requests, all the way down to the SQL.

Transaction Tracing is available for RPM Silver and Gold levels only.

<a name="How_To_Get_It"></a>
## How to Get It

Transaction Tracer to all accounts with Silver and Gold levels of service.  Your New Relic agent plugin must be version 2.3.3 or later. To get the latest New Relic plugin, issue the following command in your application directory:

    script/plugin install http://svn.newrelic.com/rpm/agent/newrelic_rpm --force

You will then need to add some options to your application's `config/newrelic.yml` file. Open the file `vendors/plugins/newrelic_rpm/newrelic.yml` to see what the options are. You should see the transaction tracer settings near the top of the file:

    # Tells transaction tracer and error collector whether or not to capture HTTP params.
    # When true, the Rails filter_parameters mechanism is used so that sensitive parameters are not recorded
    capture_params: false
    
    # Transaction tracer captures deep information about slow
    # transactions and sends this to the RPM service once a minute. Included in the
    # transaction is the exact call sequence of the transactions including any SQL statements
    # issued.
    #
    transaction_tracer:
    
    # Transaction tracer is enabled by default. Set this to false to turn it off. This feature
    # is available at the Advanced and Pro RPM product levels only.
    enabled: true
    
    # When transaction tracer is on, SQL statements can optionally be recorded. The recorder
    # has three modes, "off" which sends no SQL, "raw" which sends the SQL statement in its 
    # original form, and "obfuscated", which strips out numeric and string literals
    record_sql: obfuscated
    

<a name="Using_Transaction_Tracer"></a>
## Using Transaction Tracer

Each minute, Transaction Tracer collects data for the slowest transaction executed.   If the transaction takes longer than two seconds, the data is captured for you to examine.  To use transaction tracer, you must ensure that it is enabled in the RPM Agent plugin by setting the `enabled` option to `true`.  

To see captured transaction traces, log into RPM and select a cluster/host/agent.  Then, in the right drop down menu, select Transaction Traces.  A list of traces captured for the current time window will be displayed.  To see the contents of a transaction trace, simply click on the trace in the table.

<a name="Configuration_Options"></a>
## Configuration Options

    enabled: <true|false>
sets whether or not transaction tracing is enabled.  Defaults to `false`.

    record_sql: <off|raw|obfuscated>
determines what to do with SQL statements.  The settings are:

 *  `off` -- no SQL is recorded.  
 * `raw` -- the raw SQL is recorded.  
 * `obfuscated` -- but all string and numeric literals in the SQL are replaced with "?" before the data is sent.

Obfuscation is the default mode; it provides enough data for most analytic cases and prevents sensitive data contained in the SQL statements from being sent to RPM.

<a name="RPM_UI"></a>
## RPM UI

To see transaction traces from RPM (i.e. `rpm.newrelic.com`), select a cluster/host/agent from the your home page and then select "Transaction Traces" in the second pull-down menu. You should see something like:


Traces are shown for the current time window. They are sorted by response time so that the slowest show up at the top. To see the details for a trace, click on the Action field.

At the top of the transaction trace page, you'll see a header with the following fields:

* Start Time
* Instance
* Action
* URL
* Duration
* CPU Burn
* Params 	
* Custom 	

Most of the fields should be self explanatory. CPU burn can be compared with the trace duration to ascertain how much time a transaction spends blocking vs. executing code. For example, if a transaction takes 100ms to execute but only burns 50ms of CPU, then another 50ms of time is spent waiting. Normally, this will be time spent waiting for I/O to complete.

And finally, the detail section of the transaction trace shows a variety of views that allow you to analyze the performance of the transaction.


<a name="Security"></a>
## Security

Transaction Tracing by its very nature captures information about specific actions taken on your site.  While this information can be vital for tracking down performance issues, the process of collecting it also has security implications you should be aware of.

The SQL queries captured may contain sensitive information you do not want (or need) captured.  For this reason the `record_sql` option (see above) defaults to `obfuscated`.  Obfuscation strips string literals and numeric sequences and replaces them with the ? character. For example:

    select * from table where ssn='0115551212'

obfuscates to:

    select * from table where ssn=?

Likewise HTTP request parameters which are captured in transaction traces to allow you to see more context for a trace may contain sensitive information.  You can also add parameters into the currently executing transaction (see the customization section). The ActionController filter_parameter_logging method can be used to hide sensitive parameters from being captured by Transaction Traces.  

This is the same mechanism Rails uses to hide sensitive parameters from log files.

<a name="Customization"></a>
## Customization

There are a few ways in which transaction tracing can be customized.

### Capturing HTTP Params
By default, both transaction traces and error snapshots do not record http request parameters. This is because http request parameters sometimes contain sensitive information. To enable the collection of HTTP parameters in transaction traces and error snapshots, put the configuration into your newrelic.yml file:

    # Tells transaction tracer and error collector (when enabled) whether or not to capture HTTP params. 
    # When true, the RoR filter_parameters mechanism is used so that sensitive parameters are not recorded
    capture_params: true
    

### Request Parameters
Custom data can be inserted in the "params" section of a transaction trace. Please make sure that "capture HTTP params" is turned on (see above).

Use the following Agent API:

    NewRelic::Agent.add_request_parameters(options = {})

where options is a hash of key/value pairs. The keys and values are serialized to RPM and must be classes that are available to RPM, such as String, FixedNum, Float, etc.

### Obfuscation
The default SQL obfuscation can be augmented with the following Agent API:

NewRelic::Agent.set_sql_obfuscator(type, &block)
 
where type is one of the following:

*  :before - run your obfuscation block before running the default obfuscation block
*  :after - run your obfuscation block after running the default obfuscation block
*  :replace - use your obfuscation block in place of the default obfuscator

obfuscation blocks take a single parameter, which is a String sql query, and return a String sql query.

Custom obfuscation should be used to strip sensitive data from SQL statements when the default obfuscator isn't sufficient, or to obfuscate less when the default obfuscator is overly pessimistic.

### Disable SQL collection
To disable all SQL collection in a block, do the following:

    NewRelic::Agent.disable_sql_recording do
       ...
     end

<a name="Troubleshooting"></a>
## Troubleshooting

### No Traces
If you don't see any traces in the UI, the troubleshoot as follows:

1. Look in the log/newrelic_agent.<port>.log file and make sure it says that transaction tracing is enabled
2. Change the transaction_threshold config property to 0.0001 to make sure that any transaction will be captured
3. Make sure that your account at New Relic has Early Access enabled. If it doesn't then you won't see the Transaction Traces drop down menu in RPM
