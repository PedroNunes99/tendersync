---------------------------- section ----------------------------
docs
---------------------------- document_id ----------------------------
640
---------------------------- title ----------------------------
Agent API User's Guide
---------------------------- permalink ----------------------------
agent-api
---------------------------- keywords ----------------------------
agent api trace exceptions deployments capistrano
---------------------------- body ----------------------------
<a name="Excluding_Actions_From_Monitoring"></a>
## Excluding Controller#actions from monitoring

If there is a controller action that shouldn't be measured by New Relic, then add this to the top of your controller:

    newrelic_ignore :only => :my_action

If the key is `:only`, then the following actions are ignored. You can provide a single action or an array of actions. if the key is `:except`, then all actions in this controller are ignored except for the ones specified.

<a name="Annotating_Traces_And_Snapshots"></a>
## Annotating Transaction Traces and Error Snapshots

By default, transaction traces and error snapshots both record the http request parameters. These are displayed in RPM when viewing transaction traces and error snapshots. They are helpful to have because they provide context about the request that may be pertinent in analyzing what happened.

Transaction traces and error snapshots can also be annotated with custom key/value pairs. This is helpful because even more context can be provided. For example, annotating an account name could be helpful in knowing which customer was having a problem.

At New Relic, we annotate every request with a user's email address, account name, and which shard their data lives on. Notice in this screen shot that these fields show up in the "Custom" section of the transaction trace:

![New_Relic_RPM_-_Rails_Application_Performance_Management.jpg](http://s3.amazonaws.com/entp-tender-production/assets/55095552edd6580acaa286388d9d38d14882d871/New_Relic_RPM_-_Rails_Application_Performance_Management_normal.jpg)

To annotate key/value pairs into transaction traces and error snapshots, make the following call from within your application:

    NewRelic::Agent.add_custom_parameters(:key => value)

This api is defined in the New Relic plugin file lib/newrelic/agent/agent.rb.

**Note:** There is no way to only add this data for requests which will trigger a transaction trace or error snapshot. Always add the custom parameters and they will be picked up by slow transactions or transactions with errors.

<a name="Ignoring_Exceptions_In_Error_Collector"></a>
## Ignoring exceptions in Error Collector

Error Collector normally catches and reports all uncaught errors. However, there may be times when known errors can be filtered. The Agent has two ways to filter errors. The first is to add Exceptions to be filtered to the `newrelic.yml` file under "error_collector/ignore_errors". For example:

    # Error collector captures information about uncaught exceptions and sends them to RPM for
    # viewing
    error_collector:
    
      # Error collector is enabled by default. Set this to false to turn it off. This feature
      # is only available at the Silver and above product levels
      enabled: true
    
      # Tells error collector whether or not to capture a source snippet around the place of the
      # error when errors are View related.
      capture_source: true    
    
      # To stop specific errors from reporting to RPM, set this property to comma separated 
      # values
      #
      ignore_errors: ActionController::RoutingError

The second way to filter is programmatic and offers more control. In your application initialization, you can register a block with the Agent to be called when an error is detected. The block should return the error to record, or nil if the error is to be ignored. For example:

    NewRelic::Agent.ignore_error_filter do |error|
      if error.message =~ /gateway down/
        nil
      elsif
        error.class.name == "InvalidLicenseException"
        StandardError.new "We should never see this..."
      else
        error
      end
    end

<a name="Recording_caught_exceptions"></a>
## Recording caught exceptions with Error Collector

Error collector normally only records uncaught exceptions, however there are times where it is desirable to gracefully recover from an exception but have it logged in RPM anyway. To do this, make the following call from within your application:

    NewRelic::Agent.agent.error_collector.notice_error(action_name, url, params, exception)

Where:

* `action_name` = a string in form '<controller_name>/<action_name>'
* `url` = the url of this request
* `params` = http parameters in a hash
* `exception` = an Exception class. We record the class name and the message from the exception

<a name="Adding_Custom_Metrics"></a>
## Adding Custom Metrics

With the introduction in version 1.3 of Custom Dashboards you can now capture information from specific methods in your application and display the statistics in customized dashboards.

To add instrumentation to a method invocation, add the following code to the class or module definition:

    add_method_tracer :some_method, 'Custom/<class>/<method>'

After running the application for a while, the new metric will appear in the metric selector in the Custom Dashboards editor.

In addition to making the custom metrics available in the Custom Dashboards editor, you will also see them controller breakdowns, unless you specify `:push_scope => false`.

**CAUTION** - adding probes to your code adds overhead. Each probe burns about 20 microseconds of CPU. Be careful not to probe a method that's called frequently in a loop.

<a name="Adding_Visibility_To_A_Transaction_Trace"></a>
## Adding visibility to a Transaction Trace

If your transaction traces have long periods of time where the New Relic Agent probes have zero visibility, you can add visibility with custom method instrumentation. To instrument a method in your application so that it shows up in Transaction Traces, add the following code to the class to instrument:

    add_method_tracer :some_method, 'Custom/<class>/<method>', :metric => false

The `:metric => false` option tells the Agent to have this probe only participate in transaction traces and not produce streams of metric data, which would not be visible except in Custom Dashboards.

**CAUTION** - adding probes to your code adds overhead. Each probe burns about 20 microseconds of CPU. Be careful not to probe a method that's called frequently in a loop.

<a name="Deployment_Integration"></a>
## Deployment Integration (v2.8.1+)

RPM allows you to send information about application deployments. This information is presented in a number of ways. If you have a Lite or Bronze subscription, you will see deployment lines show up on all time series graphs. When hovering over these lines, information about who deployed is shown. For Silver subscribers, a deployment summary page is show, listing all deployments along with information about each. For Gold subscribers, the details of a deployment can be drilled into.

### Configuration

You will need the latest release of the New Relic agent (2.8.1). We recommend completely blowing away the old agent plugin before reinstalling. To do this for a SVN environment, execute the following commands:

    cd vendor/plugins
    svn rm newrelic_rpm
    svn commit -m "upgrading newrelic" 

For other source code control environments, you'll need to do something equivalent.

Then, to upgrade to the latest agent, execute the following command:

    script/plugin install `http://newrelic.rubyforge.org/svn/newrelic_rpm` --force

### Naming the app

You will need to make sure you use application naming in the newrelic.yml file. In short, the property "app_name" must be set. This is how the deployment script knows which application to map the deployment to.

### Capistrano

Newer versions of the Capistrano Capfile have the following line at the file. Check your Capfile for the following line and add if necessary, just above the load deploy.rb file:

    Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) }

Then, add the hook to your deploy.rb to send deployments to RPM.

    after "deploy:update_code", "newrelic:notice_deployment"

Note: capistrano integration won't work when the New Relic agent is installed as a gem

### Direct Invocation

If you aren't using capistrano, you can still send deployment information to RPM. The command to execute is:

    ruby vendor/plugins/newrelic_rpm/bin/newrelic_cmd deployments [options]

Pass the script `-h` to see what the options are. The "change log" is read by the script from `STDIN`.
